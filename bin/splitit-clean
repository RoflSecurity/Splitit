#!/usr/bin/env bash
# splitit-clean: cleans project, bumps version, updates README

set -e

# Determine project root (one level up from bin)
PROJECT_ROOT="$(dirname "$0")/.."
cd "$PROJECT_ROOT"

# Check package.json exists
if [[ ! -f package.json ]]; then
  echo "⚠️ package.json not found. Exiting."
  exit 1
fi

# Clean common temporary folders
echo "🧹 Cleaning project..."
rm -rf node_modules venv dist *.egg-info
echo "✅ Project cleaned"

# Version bump with jq if available
if command -v jq &> /dev/null; then
  OLD_VERSION=$(jq -r '.version' package.json)
  # bump patch version
  NEW_VERSION=$(echo "$OLD_VERSION" | awk -F. -v OFS=. '{$NF+=1 ; print}')
  jq ".version=\"$NEW_VERSION\"" package.json > tmp.$$.json && mv tmp.$$.json package.json
  echo "📦 package.json version updated: $OLD_VERSION → $NEW_VERSION"
else
  echo "⚠️ jq is required for version bump. Install it first."
fi

# Update README.md dynamically
if [[ -f README.md ]]; then
  OUTPUT_COUNT=$(ls -1q output 2>/dev/null | wc -l || echo 0)
  VERSION=$(jq -r '.version' package.json 2>/dev/null || echo "N/A")
  sed -i "/^Version:/c\**Version:** $VERSION" README.md
  sed -i "/^Output:/c\Output: $OUTPUT_COUNT files in output/" README.md
  echo "📄 README.md dynamically updated with version, logo, and output size"
fi
